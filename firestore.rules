rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read if user is accessing their own document or is an admin
      allow read: if isOwner(userId) || isAdmin();
      
      // Allow write if user is an admin and only for admin users
      allow write: if isAdmin() && (
        // Only allow creating/updating/deleting admin users
        (request.resource.data.role == 'admin')
      );
      
      // Allow users to update their own lastLogin field
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLogin']);
    }

    // Blog posts collection
    match /blogPosts/{postId} {
      allow read: if true;  // Public read access
      allow write: if isAdmin();
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if true;  // Public read access
      allow write: if isAdmin();
    }

    // Gallery collection
    match /gallery/{imageId} {
      allow read: if true;  // Public read access
      allow write: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if true;  // Public read access
      allow write: if isAdmin();
    }

    // Default deny all for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 